
server_names_hash_bucket_size 64;


log_format mainlog '$http_x_forwarded_for - $remote_user [$time_local] "$host" "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $request_time';


map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

#Load Balancing desk
upstream meteor_fluorine_desk {
  ip_hash;               # this directive ensures that each unique visiting IP will always be routed to the same server.

  {% for host, port in meteor_fluorine_desk_ips.iteritems() %}
  server {{host}}:{{port}} fail_timeout=0;
  {% endfor %}
}


#Load Balancing web
upstream meteor_fluorine_web {
  ip_hash;               # this directive ensures that each unique visiting IP will always be routed to the same server.

  {% for host, port in meteor_fluorine_web_ips.iteritems() %}
  server {{host}}:{{port}} fail_timeout=0;
  {% endfor %}
}

upstream frappe {
    server 127.0.0.1:8000 fail_timeout=0;
}

upstream socketio-server {
    server 127.0.0.1:3000 fail_timeout=0;
}

{% macro location_block(site, port=80, default=False, server_name=None, sites=None, dns_multitenant=False) -%}
		keepalive_timeout 5;
		sendfile on;
		root {{ sites_dir }};

		#fix the frappe POST to root url '/'
		set $referer 0;
		if ($request_method = POST){
			set $frappe 1;
		}

		if ($args ~ "cmd=(.+)") {
			set $frappe 1;
		}

		if ($http_referer ~* [http://|https://](.*)/desk){
			set $referer "${frappe}1";
		}

		if ($referer = 11){
			rewrite ^/$ /tmp last;
		}


		location ~* "^/api|^/desk" {
			rewrite "^/desk/(.*)$" "http://$remote_addr/desk#$1" last;#a usar
			try_files $uri @magic;
		}


		location /login {
			try_files $uri @meteor;
		}

		location =/tmp {
			internal;
			rewrite $uri / break;
			try_files $uri @magic;
		}

		location /private/ {
			internal;
			try_files /$uri =424;
		}

		location /assets {
			try_files $uri =404;
		}

		location /socket.io {
			proxy_pass http://socketio-server;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			{% if not dns_multitenant %}
			proxy_set_header X-Frappe-Site-Name {{ site.name }};
			{% endif %}
			proxy_set_header Origin $http_host;
			proxy_set_header Host $host;
		}

		location / {
			try_files /{{ "$host" if dns_multitenant else site.name }}/public/$uri @meteor;
		}

		location @magic {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			{% if not dns_multitenant %}
			proxy_set_header X-Frappe-Site-Name {{ site.name }};
			{% endif %}
			proxy_set_header Host $host;
			proxy_set_header X-Use-X-Accel-Redirect True;
			proxy_read_timeout {{http_timeout}};
			proxy_redirect off;
			proxy_pass  http://frappe;
		}

		location ~* "^/meteordesk" {
			proxy_pass http://meteor_fluorine_desk;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_http_version 1.1;
			# WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_redirect off;
			{% if default %}
			proxy_set_header X-Frappe-Site-Name {{server_name}};
			{% elif dns_multitenant and sites %}
			proxy_set_header X-Frappe-Site-Name $host;
			{% endif%}
		}

		location @meteor {
			proxy_pass http://meteor_fluorine_web;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_http_version 1.1;
			# WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_redirect off;
			{% if default %}
			proxy_set_header X-Frappe-Site-Name {{server_name}};
			{% elif dns_multitenant and sites %}
			proxy_set_header X-Frappe-Site-Name $host;
			{% endif%}
		}



{%- endmacro %}

{% macro server_name_block(site, default=False, server_name=None, sites=None, dns_multitenant=False) -%}
		client_max_body_size 4G;
		{% if dns_multitenant and sites %}
			server_name {% for site in sites %} {{ site.name }} {% endfor %};
		{% else %}
			server_name {{ site.name if not server_name else server_name }};
		{% endif %}
{%- endmacro %}

{% macro server_block_http(site, port=80, default=False, server_name=None, sites=None, dns_multitenant=False) -%}
	server {
		listen {{ site.port if not default and site.port else port }} {% if default %} default {% endif %};
		{{ server_name_block(site, default=default, server_name=server_name, sites=sites, dns_multitenant=dns_multitenant) }}
		{{ location_block(site, port=port, default=default, server_name=server_name, sites=sites, dns_multitenant=dns_multitenant) }}
	}
{%- endmacro %}

{% macro server_block_https(site, port=443, default=False, server_name=None, sites=None, dns_multitenant=False) -%}
	server {
		listen {{ site.ssl_port if not default and site.ssl_port else port }} {% if default %} default {% endif %};
		{{ server_name_block(site, default=default, server_name=server_name, sites=sites, dns_multitenant=dns_multitenant) }}

		ssl on;
		ssl_certificate      {{ site.ssl_certificate }};
		ssl_certificate_key  {{ site.ssl_certificate_key }};
		ssl_session_timeout  5m;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
		ssl_prefer_server_ciphers   on;

		{{ location_block(site, port=port, default=default, server_name=server_name, sites=sites, dns_multitenant=dns_multitenant) }}
	}
{%- endmacro %}

{% for site in sites %}

{% if site.port %}
{{ server_block_http(site) }}
{% endif %}

{% if site.ssl_certificate_key and site.ssl_certificate %}
{{ server_block_https(site) }}
{% endif %}

{% endfor %}

{% if default_site %}
{{ server_block_http(default_site, default=True, server_name="frappe_default_site") }}
{% endif %}

{% if dns_multitenant and sites %}
{{ server_block_http(None, default=False, sites=sites, dns_multitenant=True) }}
{% endif %}
